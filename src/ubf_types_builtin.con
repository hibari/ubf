%%% -*- mode: erlang -*-
%%%

+NAME("ubf_types_builtin").

+VSN("ubf2.0").


%%
%% Excerpt from http://www.erlang.org/eeps/eep-0008.html
%%
%% For convenience, the following types are also built-in. They can be
%% thought as predefined aliases for the type unions also shown in the
%% table. (Some type unions below slightly abuse the syntax of types.)
%%
%%     ==========================  =====================================
%%           Built-in type                   Stands for
%%     ==========================  =====================================
%%     ``term()``                  ``any()``
%%     ``boolean()``               ``'false' | 'true'``
%%     ``byte()``                  ``0..255``
%%     ``char()``                  ``0..16#10ffff``
%%     ``non_neg_integer()``       ``0..``
%%     ``pos_integer()``           ``1..``
%%     ``neg_integer()``           ``..-1``
%%     ``number()``                ``integer() | float()``
%%     ``list()``                  ``[any()]``
%%     ``maybe_improper_list()``   ``maybe_improper_list(any(), any())``
%%     ``maybe_improper_list(T)``  ``maybe_improper_list(T, any())``
%%     ``string()``                ``[char()]``
%%     ``nonempty_string()``       ``[char(),...]``
%%     ``iolist()``                ``maybe_improper_list(``
%%                                     ``char() | binary() |``
%%                                     ``iolist(), binary() | [])``
%%     ``module()``                ``atom()``
%%     ``mfa()``                   ``{atom(),atom(),byte()}``
%%     ``node()``                  ``atom()``
%%     ``timeout()``               ``'infinity' | non_neg_integer()``
%%     ``no_return()``             ``none()``
%%     ==========================  =====================================
%%
%% Users are not allowed to define types with the same names as the
%% predefined or built-in ones. This is checked by the compiler and
%% its violation results in a compilation error. (For bootstrapping
%% purposes, it can also result to just a warning if this involves a
%% built-in type which has just been introduced.)
%%
%% *NOTE*: The following built-in list types also exist, but they are
%% expected to be rarely used. Hence, they have long names:
%%
%% ::
%%
%%     nonempty_maybe_improper_list(Type) :: nonempty_maybe_improper_list(Type, any())
%%     nonempty_maybe_improper_list() :: nonempty_maybe_improper_list(any())
%%
%% where the following two types
%%
%% ::
%%
%%     nonempty_improper_list(Type1, Type2)
%%     nonempty_maybe_improper_list(Type1, Type2)
%%
%% define the set of Erlang terms one would expect.
%%


%%
%% Supported eep8 predefined types:
%%
%%   via ubf predefined types
%%     - any()
%%     - none()
%%     - list()
%%
%%   via ubf contract
%%     - nil()
%%     - term()
%%     - byte()
%%     - char()
%%     - non_neg_integer()
%%     - pos_integer()
%%     - neg_integer()
%%     - number()
%%     - string()
%%     - nonempty_string()
%%     - module()
%%     - mfa()
%%     - node()
%%     - timeout()
%%     - no_return()
%%
%%   not implemented
%%     - iolist()
%%     - maybe_improper_list()
%%     - maybe_improper_list(T)
%%     - nonempty_maybe_improper_list()
%%     - nonempty_maybe_improper_list(T)
%%


%%%%%%
+TYPES

%% Erlang built-in types
nil()             :: [];
term()            :: any();
boolean()         :: 'false' | 'true';
byte()            :: 0..255;
char()            :: 0..16#10ffff;
non_neg_integer() :: 0..;
pos_integer()     :: 1..;
neg_integer()     :: ..-1;
number()          :: integer() | float();
string()          :: [char()];
nonempty_string() :: [char()]+;
module()          :: atom();
mfa()             :: {atom(), atom(), byte()};
node()            :: atom();
timeout()         :: 'infinity' | non_neg_integer();
no_return()       :: none();

%% UBF built-in types
ubfproplist()     :: {'#P', [{term(), term()}]};
ubfstring()       :: {'#S', [byte()]}.
